///////////////////////////////////////////////////
////////////////// INITIALIZE /////////////////////
///////////////////////////////////////////////////

initialize() {
	//nonWF Model
	initializeSLiMModelType("nonWF");
	
	//Pedigree
	initializeSLiMOptions(keepPedigrees = T);
	//Tree-sequence
	initializeTreeSeq(simplificationRatio = INF);
	//SEX
	initializeSex("A");
	
	//Just for the pedigree scheme, set seed
	setSeed(seed);
	
	//Here chr_length does not matter since we are interested in pedigree
	defineConstant("chr_length", 158999999);
 	//Define Mortality
 	defineConstant("FIT", c(0.9,0.7,0.5,0.3,0));
 		
	//Mutation rate of 0
	initializeMutationRate(0);
	initializeMutationType("m1", 0.5, "f", 0);
	//g1 genomic element type: all chr
	initializeGenomicElementType("g1", m1, 1.0);
	
	// uniform chromosome of length 100bp here
	initializeGenomicElement(g1, 0, chr_length);
	//Initializing recombination rate but does not matter now
	initializeRecombinationRate(1e-8);
	
	//delete files with same mutID
	deleteFile("~/PhD/ROH/Which_data/Data/Cattle_Simulations/Slim_creating_inbreeding/mating_Sim" + seed + ".txt");
	deleteFile("~/PhD/ROH/Which_data/Data/Cattle_Simulations/Slim_creating_inbreeding/death_Sim" + seed + ".txt");
	

}


///////////////////////////////////////////////////
//////////////// REPRODUCTION CALLBACKS ///////////
///////////////////////////////////////////////////

//Reproduction, CONTROLLED REPRODUCTION --> Ne = 100
1:200 reproduction(p1, "F") {

	//randomly sample 25 individuals who will mate with the females
	potential_mates = p1.sampleIndividuals(25, sex = "M", minAge = 2);

	for (i in seqLen(length(p1.individuals[p1.individuals.sex == "F" & p1.individuals.age > 1])))
	{
		//Select mate 1
		mate1 = p1.individuals[p1.individuals.sex == "F" & p1.individuals.age > 1][i];
	
		//Sample mate
		mate2 = sample(potential_mates, 1);
		//Create offspring
		child = subpop.addCrossed(mate1, mate2);
		child.tag = child.pedigreeID;
		
		//log the mating
		line = paste(c(sim.generation, mate1.tag, mate2.tag, child.tag));
		writeFile("~/PhD/ROH/Which_data/Data/Cattle_Simulations/Slim_creating_inbreeding/mating_Sim" + seed + ".txt", line, append = T);
	}
	
	//So that it is called one per generation
	self.active = 0;
	
}

///////////////////////////////////////////////////
////////////// Generating subpopulations //////////
///////////////////////////////////////////////////

// Generation 1, reading subsampled individuals which will create the breed from BurnIn tree
1 early() {
		
	sim.readFromPopulationFile("/Users/elavanc1/PhD/ROH/Which_data/Data/Cattle_Simulations/BURN_IN/BI_Full_TreeSeq_Cattle_" + seed + "_CHR_1.trees");
		
	//Adding tag values from pedigree
	p1.individuals.tag = p1.individuals.pedigreeID;

}

///////////////////////////////////////////////////
//////////////// FITNESS & SURVIVAL ///////////////
///////////////////////////////////////////////////

//Generating deaths
1:200 early() {

	//WILD POPULATION
	inds_W = p1.individuals;
	ages_W = inds_W.age;
	survival_W = FIT[ages_W];
	inds_W.fitnessScaling = survival_W;
	
	//Density dependant Fitness
	p1.fitnessScaling = 1500 / (p1.individualCount * mean(survival_W));
	
	//Save all individuals to save deaths later
	sim.setValue("indiv_begin_gen_W", p1.individuals.tag);
	
}

//Logging deaths
late() {
	//Individuals at the beginning of generation (both populations)
	ind_beg = sim.getValue("indiv_begin_gen_W");
	//Individuals at then end of the generation (after fitness scaling)
	ind_end = sim.subpopulations.individuals.tag;
	//Dead = individuals from begining not in end
	dead = ind_beg[match(ind_beg, ind_end) < 0];
	
	//Log the results
	for(indtag in dead)
	{
		line = paste(c(sim.generation, indtag));
		writeFile("~/PhD/ROH/Which_data/Data/Cattle_Simulations/Slim_creating_inbreeding/death_Sim" + seed + ".txt", line, append = T);
	}
}

///////////////////////////////////////////////////
/////////////////////// OUPUT /////////////////////
///////////////////////////////////////////////////

200: late() {
	sim.simulationFinished();
}
	