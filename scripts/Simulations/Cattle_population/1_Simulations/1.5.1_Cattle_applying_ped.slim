///////////////////////////////////////////////////
///////// FUNCTION READ MATING & DEATHS ///////////
///////////////////////////////////////////////////

function(i) readIntTable(s$ path)
{
	if (!fileExists(path))
		stop("readIntTable(): file no found at path" + path);
	l = readFile(path);
	m = sapply(l, "asInteger(strsplit(applyValue));", simplify = "matrix");
	return t(m);
}

///////////////////////////////////////////////////
////////////////// INITIALIZE /////////////////////
///////////////////////////////////////////////////


initialize() {

	
	//Two next lines are for debugging ! These variable will be defined in the command line !
	//defineConstant("CHR", 26);
	//defineConstant("chr_length", (51900000-1));
	
	//Define seed (just for files names)
	defineConstant("seed", 17390);	
	
	//nonWF Model
	initializeSLiMModelType("nonWF");
	
	//Pedigree
	initializeSLiMOptions(keepPedigrees = T);
	//Tree-sequence
	initializeTreeSeq(simplificationRatio = INF);
	//SEX
	initializeSex("A");
	
	//Mutation rate of 0
	initializeMutationRate(0);
	initializeMutationType("m1", 0.5, "f", 0);
	// g1 genomic element type: all chr
	initializeGenomicElementType("g1", m1, 1.0);
	
	// uniform chromosome of length 100Gb
	initializeGenomicElement(g1, 0, chr_length);
	
	//Reading the recombination Map
	//lines = readFile("/work/FAC/FBM/DEE/jgoudet/default/elavanch/Which_data/data/Cattle_simulations/RecMaps/SlimFriendly_RecMap_CHR_" + CHR);
	lines = readFile("./RecMaps/SlimFriendly_RecMap_CHR_" + CHR);
	rates = NULL;
	ends = NULL;
	for(line in lines)
	{
		components = strsplit(line, ",");
		ends = c(ends, asInteger(components[0]));
		rates = c(rates, asFloat(components[1]));
	}
	//Initializing recombination map
	initializeRecombinationRate(rates = rates, ends = sort(ends, ascending = T));
	 
	//Read files with same mutID
	//defineConstant("M", readIntTable("/work/FAC/FBM/DEE/jgoudet/default/elavanch/Which_data/data/Cattle_simulations/Slim_creating_inbreeding/mating_complete.txt"));
	//defineConstant("D", readIntTable("/work/FAC/FBM/DEE/jgoudet/default/elavanch/Which_data/data/Cattle_simulations/Slim_creating_inbreeding/deaths_complete.txt"));
	defineConstant("M", readIntTable("./Slim_creating_inbreeding/mating_complete.txt"));
	defineConstant("D", readIntTable("./Slim_creating_inbreeding/deaths_complete.txt"));
	
	//Extract generations (quicker)
	defineConstant("Mg", drop(M[,0]));
	defineConstant("Dg", drop(D[,0]));	

}

///////////////////////////////////////////////////
//////////////////// CALLBACKS ////////////////////
///////////////////////////////////////////////////

reproduction() {

	//Subset the generation mating matrix
	m = M[Mg == sim.generation,];
	
	//Select mating rows by rows
	for (i in seqLen(nrow(m)))
	{	
		//Select mating
		row = m[i,];
		//Select mate 1
		mate1 = p1.subsetIndividuals(tag = row[,1]);
		//Select mate 2
		mate2 = p1.subsetIndividuals(tag = row[,2]);
		//select sex
		if(row[,4] == 0){sexobj = "F";}
		else{sexobj = "M";}
		
		//Create offspring
		child = p1.addCrossed(mate1, mate2, sex = sexobj);
		child.tag = row[,3];
			
	}
	
	self.active = 0;
	
}


///////////////////////////////////////////////////
//////////////////// SIMULATION ///////////////////
///////////////////////////////////////////////////

// Generation 1, reading from TreeSeq
1 early() {
	
	//sim.readFromPopulationFile("/work/FAC/FBM/DEE/jgoudet/default/elavanch/Which_data/data/Cattle_simulations/BURN_IN/BI_Full_TreeSeq_Cattle_" + seed + "_CHR_" + CHR + ".trees");
	sim.readFromPopulationFile("./BURN_IN/BI_Full_TreeSeq_Cattle_" + seed + "_CHR_" + CHR + ".trees");
		
	//Adding tag values from pedigree
	p1.individuals.tag = p1.individuals.pedigreeID;

}

//Programming deaths
early() {
	
	//Individuals (quicker)
	inds = p1.individuals;
	//All individuals fitness = 1
	inds.fitnessScaling = 1;
	
	//subsample values from the generation to the DEATHS matrix
	d = drop(D[Dg == sim.generation,1]);
	//Get positions of matching for dead individuals
	dead = match(d, inds.tag)[match(d, inds.tag) >= 0];
	//Fintess = 0 for individuals dead
	inds[dead].fitnessScaling = 0;
	
}

200 late() {
	//sim.treeSeqOutput("/work/FAC/FBM/DEE/jgoudet/default/elavanch/Which_data/data/Cattle_simulations/Slim_Applying_inbreeding/FullTree_Cattleped_CHR" + CHR + ".trees");
	sim.treeSeqOutput("./Slim_Applying_inbreeding/FullTree_Cattleped_CHR" + CHR + ".trees");
	sim.simulationFinished();
}